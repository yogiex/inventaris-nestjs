// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

enum StatusItem {
  BARANG_MASUK
  PENDING
  BARANG_SEDANG_DIPINDAHKAN
  BARANG_BERHASIL_DIPINDAHKAN
}

enum TypeBarang {
  CONSUMEABLE
  INVENTORY
}

model Users {
  id                         Int                @id @default(autoincrement())
  username                   String             @unique
  password                   String
  role                       Int
  movement_requests_approved Movement_Request[] @relation("ApprovedBy")
  movement_request_assignTo  Movement_Request[] @relation("AssignTo")
  items                      Items_type[]
  createdAt                  DateTime           @default(now())
  update_at                  DateTime           @updatedAt
}

model Items_type {
  id               Int               @id @default(autoincrement())
  name             String
  description      String
  quantity         Int
  roomId           Int
  room             Room              @relation(fields: [roomId], references: [id])
  supplierId       Int
  supplier         Supplier          @relation(fields: [supplierId], references: [id])
  inputBy          Int
  users            Users             @relation(fields: [inputBy], references: [id])
  status           StatusItem        @default(BARANG_MASUK)
  availability     Boolean           @default(true)
  type             TypeBarang
  movement_request Movement_Request?
  created_at       DateTime          @default(now())
  update_at        DateTime          @updatedAt
  Items            Items[]
}

model Items {
  id         String     @id @default(uuid())
  roomId     Int
  room       Room       @relation(fields: [roomId], references: [id])
  condition  String
  spec       String
  image      String
  typeId     Int
  itemType   Items_type @relation(fields: [typeId], references: [id])
  created_at DateTime   @default(now())
  update_at  DateTime   @updatedAt
}

model Room {
  id         Int          @id @default(autoincrement())
  name       String
  building   String
  number     String
  address    String
  created_at DateTime     @default(now())
  update_at  DateTime     @updatedAt
  items      Items[]
  Items_type Items_type[]
}

model Supplier {
  id         Int          @id @default(autoincrement())
  name       String
  phone      String
  created_at DateTime     @default(now())
  update_at  DateTime     @updatedAt
  Items_type Items_type[]
}

model Movement_Request {
  id             Int        @id @default(autoincrement())
  title          String
  requesterName  String
  itemId         Int        @unique
  itemMove       Items_type @relation(fields: [itemId], references: [id])
  status         String
  approvedBy     Users?     @relation("ApprovedBy", fields: [userId], references: [id])
  userId         Int?
  assignTo       Users?     @relation("AssignTo", fields: [userAssignToId], references: [id])
  userAssignToId Int?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
}

model Movement_Request_History_Log {
  id            Int      @id @default(autoincrement())
  title         String?
  requesterName String?
  approvedBy    String?
  assignTo      String?
  inputBy       String
  inputName     String
  quantity      Int
  roomName      String
  status        String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}
